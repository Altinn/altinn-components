.button {
  --dsc-button-background--active: transparent;
  --dsc-button-background--hover: transparent;
  --dsc-button-background: transparent;
  --dsc-button-color: inherit;
  --dsc-button-color--hover: inherit;

  --dsc-button-border-width: var(--ds-border-width-default);
  --dsc-button-border-style: solid;
  --dsc-button-border-color: transparent;
  --dsc-button-border-radius: 2px; /*var(--ds-border-radius-default); */

  --dsc-button-gap: var(--ds-size-2);
  --dsc-button-padding: var(--ds-size-2) var(--ds-size-4);
  --dsc-button-size: var(--ds-size-12);

  border-style: var(--dsc-button-border-style);
  border-width: var(--dsc-button-border-width);
  border-color: var(--dsc-button-border-color);
  border-radius: var(--dsc-button-border-radius);

  background: var(--dsc-button-background);
  color: var(--dsc-button-color);

  margin: 0;
  padding: 0;

  min-width: var(--dsc-button-size);
  min-height: var(--dsc-button-size);
  height: fit-content; /* If placed in flex container */

  align-items: center;
  justify-content: center;

  overflow: visible;
  text-decoration: none;

  /* inherit font & color from ancestor */
  text-align: inherit;

  /* Normalize `line-height`. Cannot be changed from `normal` in Firefox 4+. */
  line-height: normal;

  /* Corrects font smoothing for webkit */
  -webkit-font-smoothing: inherit;
  -moz-osx-font-smoothing: inherit;

  /* Corrects inability to style clickable `input` types in iOS */
  appearance: none;

  /* user select none */
  user-select: none;
  cursor: pointer;

  /* flex */
  display: inline-flex;
  align-items: center;

}

.button:not([data-size]) {
  font-size: inherit; /* Ensure inheriting font-size when <button> */
}

.button:is(:disabled, [aria-disabled="true"]) {
  cursor: not-allowed;
  opacity: var(--ds-opacity-disabled);

  /* When both aria-disabled and aria-busy is true, opacity should be 1 and cursor should be progress */
  &[aria-busy="true"] {
    opacity: 1;
    cursor: progress;
  }
}

@media (hover: hover) and (pointer: fine) {
  /* Only use hover for non-touch devices to prevent sticky-hovering, using :where to prevent adding specificity */
  .button:where(:not(:disabled, [aria-disabled="true"], [aria-busy="true"])):hover {
    background: var(--dsc-button-background--hover);
    color: var(--dsc-button-color--hover);
  }
}

.button:where(:not(:disabled, [aria-disabled="true"], [aria-busy="true"])):active {
  background: var(--dsc-button-background--active);
}

/* solid */

.button[data-variant="solid"] {
  --dsc-button-background--active: var(--ds-color-base-active);
  --dsc-button-background--hover: var(--ds-color-base-hover);
  --dsc-button-background: var(--ds-color-base-default);
  --dsc-button-color: var(--ds-color-base-contrast-default);
  --dsc-button-color--hover: var(--ds-color-base-contrast-default);
  --dsc-button-border-color: var(--ds-color-base-default);
}

/* outline, border, text */

.button[data-variant="outline"],
.button[data-variant="dotted"],
.button[data-variant="text"] {
  --dsc-button-background: transparent;
  --dsc-button-background--active: var(--ds-color-surface-active);
  --dsc-button-background--hover: var(--ds-color-surface-hover);
  --dsc-button-color: var(--ds-color-text-subtle);
  --dsc-button-color--hover: var(--ds-color-text-default);
}

.button[data-variant="outline"],
.button[data-variant="dotted"] {
  --dsc-button-border-color: var(--ds-color-border-strong);
}

.button[data-variant="dotted"] {
  --dsc-button-border-style: dotted;
}

/* tinted */

.button[data-variant="tinted"] {
  background-color: var(--ds-color-surface-tinted);
  border-color: var(--ds-color-surface-tinted);
  border-color: var(--ds-color-base-default);
  color: var(--ds-color-base-surface-tinted);
}

.button[data-variant="tinted"]:hover {
  background-color: var(--ds-color-surface-hover);
}

.button[data-variant="tinted"]:active {
  background-color: var(--ds-color-surface-active);
}

/* rounded */

.button[data-rounded="true"] {
  border-radius: 50%;
}

/* focus from ds */

.button:focus-visible {
  /**
   * We use both box-shadow and outline to ensure that the focus style is visible,
   * in case box-shadow is overridden.
   */
  box-shadow: var(--_ds--focus, var(--dsc-focus-boxShadow));
  outline: var(--_ds--focus, var(--dsc-focus-outline));
  outline-offset: var(--_ds--focus, var(--ds-border-width-focus));

  /**
   * Using CSS custom properties toggle trick to ensure focus-visible is only shown on outermost element
   * https://css-tricks.com/the-css-custom-property-toggle-trick/
   */
  * {
    --_ds--focus: ;
  }
}
