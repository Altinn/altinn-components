.button {
  border: 1px solid;
  border-color: transparent;
  margin: 0;
  padding: 0;
  width: auto;
  overflow: visible;

  background: transparent;
  text-decoration: none;

  /* inherit font & color from ancestor */
  color: inherit;
  font: inherit;
  text-align: inherit;

  /* Normalize `line-height`. Cannot be changed from `normal` in Firefox 4+. */
  line-height: normal;

  /* Corrects font smoothing for webkit */
  -webkit-font-smoothing: inherit;
  -moz-osx-font-smoothing: inherit;

  /* Corrects inability to style clickable `input` types in iOS */
  appearance: none;

  /* user select none */
  user-select: none;
  cursor: pointer;

  /* flex */
  display: inline-flex;
  align-items: center;
  border-radius: 2px;
}

.button[data-reverse="true"] {
  flex-direction: row-reverse;
}

.button:disabled {
  opacity: 0.5;
  pointer-events: none;
}

/* sizes */

.button[data-size="xs"] {
  height: 2.25rem; /* xs 36 */
}

.button[data-size="sm"] {
  height: 2.625rem; /* sm 42 */
}

.button[data-size="md"] {
  height: 3rem; /* md 48 */
}

.button[data-size="lg"] {
  height: 3.5rem; /* lg 56 */
}

/* solid */

.button[data-variant="solid"] {
  background-color: var(--ds-color-base-default);
  border-color: var(--ds-color-base-default);
  color: var(--ds-color-base-contrast-default);
}

.button[data-variant="solid"]:hover {
  background-color: var(--ds-color-base-hover);
  border-color: var(--ds-color-base-hover);
}

.button[data-variant="solid"]:active {
  background-color: var(--ds-color-base-active);
  border-color: var(--ds-color-base-active);
}

/* tinted */

.button[data-variant="tinted"] {
  background-color: var(--ds-color-surface-tinted);
  border-color: var(--ds-color-surface-tinted);
  border-color: var(--ds-color-base-default);
  color: var(--ds-color-base-surface-tinted);
}

.button[data-variant="tinted"]:hover {
  background-color: var(--ds-color-surface-hover);
}

.button[data-variant="tinted"]:active {
  background-color: var(--ds-color-surface-active);
}

/* primary outline, dotted + text */

.button[data-variant="outline"],
.button[data-variant="dotted"] {
  border-color: var(--ds-color-base-default);
}

.button[data-variant="outline"] {
  border-style: solid;
}

.button[data-variant="dotted"] {
  border-style: dotted;
}

.button[data-variant="text"] {
  border-color: transparent;
  color: var(--ds-color-text-subtle);
}

.button[data-variant="outline"]:hover,
.button[data-variant="dotted"]:hover,
.button[data-variant="text"]:hover {
  background-color: var(--ds-color-surface-hover);
  color: var(--ds-color-text-default);
}

.button[data-variant="outline"]:active,
.button[data-variant="dotted"]:active,
.button[data-variant="text"]:active {
  background-color: var(--ds-color-surface-active);
}

.button[data-variant="link"] {
  border: none;
  color: var(--ds-color-text-subtle);
}

.button[data-variant="link"]:hover {
  color: var(--ds-color-base-hover);
}

/* focus from ds */

.button:focus-visible {
  /**
   * We use both box-shadow and outline to ensure that the focus style is visible,
   * in case box-shadow is overridden.
   */
  box-shadow: var(--_ds--focus, var(--dsc-focus-boxShadow));
  outline: var(--_ds--focus, var(--dsc-focus-outline));
  outline-offset: var(--_ds--focus, var(--ds-border-width-focus));

  /**
   * Using CSS custom properties toggle trick to ensure focus-visible is only shown on outermost element
   * https://css-tricks.com/the-css-custom-property-toggle-trick/
   */
  * {
    --_ds--focus: ;
  }
}
